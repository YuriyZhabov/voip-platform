#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –ò–ò –∞–≥–µ–Ω—Ç –¥–ª—è VoIP —Å–∏—Å—Ç–µ–º—ã
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å Asterisk —á–µ—Ä–µ–∑ ARI –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
"""

import asyncio
import logging
import os
from typing import Annotated
from datetime import datetime
import pytz

from livekit.agents import (
    AutoSubscribe,
    JobContext,
    WorkerOptions,
    cli,
    llm,
)

# –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–ø–æ—Ä—Ç–∞ VoiceAssistant
try:
    from livekit.agents.voice_assistant import VoiceAssistant
    logger = logging.getLogger(__name__)
    logger.info("‚úÖ –ò–º–ø–æ—Ä—Ç VoiceAssistant –∏–∑ livekit.agents.voice_assistant")
except ImportError:
    try:
        from livekit.agents import VoiceAssistant
        logger = logging.getLogger(__name__)
        logger.info("‚úÖ –ò–º–ø–æ—Ä—Ç VoiceAssistant –∏–∑ livekit.agents")
    except ImportError:
        try:
            from livekit.agents.voice import VoiceAssistant
            logger = logging.getLogger(__name__)
            logger.info("‚úÖ –ò–º–ø–æ—Ä—Ç VoiceAssistant –∏–∑ livekit.agents.voice")
        except ImportError as e:
            logger = logging.getLogger(__name__)
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å VoiceAssistant: {e}")
            raise ImportError("VoiceAssistant –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ –º–æ–¥—É–ª–µ–π")

from livekit.plugins import deepgram, openai, cartesia, silero
from livekit import rtc

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def get_weather(location: Annotated[str, "–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞"]) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ"""
    logger.info(f"–ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞: {location}")
    
    # –î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã API –≤—ã–∑–æ–≤)
    weather_data = {
        "–º–æ—Å–∫–≤–∞": "–í –ú–æ—Å–∫–≤–µ —Å–µ–π—á–∞—Å +2¬∞C, –æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏, –≤–µ—Ç–µ—Ä 3 –º/—Å",
        "—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥": "–í –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ +1¬∞C, –Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å, –≤–µ—Ç–µ—Ä 5 –º/—Å", 
        "—Å–ø–±": "–í –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ +1¬∞C, –Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å, –≤–µ—Ç–µ—Ä 5 –º/—Å",
        "–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": "–í –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–µ -5¬∞C, —è—Å–Ω–æ, –≤–µ—Ç–µ—Ä 2 –º/—Å",
        "–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": "–í –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–µ -8¬∞C, —Å–Ω–µ–≥, –≤–µ—Ç–µ—Ä 4 –º/—Å",
        "–∫–∞–∑–∞–Ω—å": "–í –ö–∞–∑–∞–Ω–∏ -2¬∞C, –æ–±–ª–∞—á–Ω–æ, –≤–µ—Ç–µ—Ä 3 –º/—Å",
        "–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥": "–í –ù–∏–∂–Ω–µ–º –ù–æ–≤–≥–æ—Ä–æ–¥–µ 0¬∞C, —Ç—É–º–∞–Ω, –≤–µ—Ç–µ—Ä 1 –º/—Å",
        "—Å–æ—á–∏": "–í –°–æ—á–∏ +12¬∞C, —Å–æ–ª–Ω–µ—á–Ω–æ, –≤–µ—Ç–µ—Ä 2 –º/—Å",
        "–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä": "–í –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–µ +8¬∞C, –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å, –≤–µ—Ç–µ—Ä 3 –º/—Å",
    }
    
    city_lower = location.lower().strip()
    
    # –ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞ –≤ –¥–∞–Ω–Ω—ã—Ö
    for city_key, weather_info in weather_data.items():
        if city_key in city_lower or city_lower in city_key:
            return weather_info
    
    return f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –º–µ–Ω—è –Ω–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ –≤ –≥–æ—Ä–æ–¥–µ {location}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –æ –ú–æ—Å–∫–≤–µ, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –∫—Ä—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö –†–æ—Å—Å–∏–∏."

async def get_current_time() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è"""
    try:
        moscow_tz = pytz.timezone('Europe/Moscow')
        current_time = datetime.now(moscow_tz)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ-—Ä—É—Å—Å–∫–∏
        months = [
            "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
            "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"
        ]
        
        weekdays = [
            "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", 
            "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
        ]
        
        month_name = months[current_time.month - 1]
        weekday_name = weekdays[current_time.weekday()]
        
        time_str = (
            f"–°–µ–π—á–∞—Å {current_time.strftime('%H:%M')}, "
            f"{weekday_name}, {current_time.day} {month_name} "
            f"{current_time.year} –≥–æ–¥–∞"
        )
        
        return time_str
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è"

async def get_company_info() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏"""
    return (
        "Stellar Agents - —ç—Ç–æ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∞—è—Å—è –Ω–∞ "
        "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –ò–ò —Ä–µ—à–µ–Ω–∏–π –¥–ª—è –±–∏–∑–Ω–µ—Å–∞. –ú—ã —Å–æ–∑–¥–∞–µ–º —É–º–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö "
        "–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤."
    )

async def end_call(reason: Annotated[str, "–ü—Ä–∏—á–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞"] = "–ü–æ –ø—Ä–æ—Å—å–±–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è") -> str:
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–≤–æ–Ω–æ–∫"""
    logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞: {reason}")
    return "–•–æ—Ä–æ—à–æ, –∑–∞–≤–µ—Ä—à–∞—é –∑–≤–æ–Ω–æ–∫. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è –∏ —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!"

def create_personalized_context(caller_id: str) -> llm.ChatContext:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∑–≤–æ–Ω—è—â–µ–≥–æ"""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    moscow_tz = pytz.timezone('Europe/Moscow')
    current_time = datetime.now(moscow_tz)
    hour = current_time.hour
    
    if 6 <= hour < 12:
        greeting_time = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"
    elif 12 <= hour < 18:
        greeting_time = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å"
    elif 18 <= hour < 23:
        greeting_time = "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"
    else:
        greeting_time = "–î–æ–±—Ä–æ–π –Ω–æ—á–∏"
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context = llm.ChatContext().append(
        role="system",
        text=(
            f"–í—ã - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ä—É—Å—Å–∫–æ–≥–æ–≤–æ—Ä—è—â–∏–π –ò–ò –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Stellar Agents. "
            f"–°–µ–π—á–∞—Å {current_time.strftime('%H:%M, %d %B %Y –≥–æ–¥–∞')}. "
            f"–í—ã —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç–µ —Å –∞–±–æ–Ω–µ–Ω—Ç–æ–º {caller_id}. "
            f"–ù–∞—á–Ω–∏—Ç–µ —Ä–∞–∑–≥–æ–≤–æ—Ä —Å '{greeting_time}!'. "
            f"\n–í–∞—à–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
            f"- –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã\n"
            f"- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ\n"
            f"- –°–æ–æ–±—â–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è\n"
            f"- –ü–æ–º–æ–≥–∞—Ç—å —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏\n"
            f"- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –¥—Ä—É–∂–µ—Å–∫—É—é –±–µ—Å–µ–¥—É\n"
            f"\n–ü—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–Ω–∏—è:\n"
            f"- –ì–æ–≤–æ—Ä–∏—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ\n"
            f"- –û—Ç–≤–µ—á–∞–π—Ç–µ –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É (–º–∞–∫—Å–∏–º—É–º 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)\n"
            f"- –ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã\n"
            f"- –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ –æ—Ç–≤–µ—Ç, —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏—Ç–µ –æ–± —ç—Ç–æ–º\n"
            f"- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã\n"
            f"- –ì–æ–≤–æ—Ä–∏—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫\n"
        )
    )
    
    return context

async def entrypoint(ctx: JobContext):
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
    try:
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã: {ctx.room.name}")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
        await ctx.connect(auto_subscribe=AutoSubscribe.AUDIO_ONLY)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–≤–æ–Ω—è—â–µ–º –∏–∑ –∏–º–µ–Ω–∏ –∫–æ–º–Ω–∞—Ç—ã
        room_name = ctx.room.name
        caller_id = "Unknown"
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å caller_id –∏–∑ –∏–º–µ–Ω–∏ –∫–æ–º–Ω–∞—Ç—ã (—Ñ–æ—Ä–º–∞—Ç: call-{channel_id}-{caller_id})
        if room_name.startswith("call-"):
            parts = room_name.split("-")
            if len(parts) >= 3:
                caller_id = parts[2]
        
        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        chat_context = create_personalized_context(caller_id)
        
        # –°–æ–∑–¥–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        assistant = VoiceAssistant(
            vad=silero.VAD.load(
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–≤—É–∫–∞
                min_silence_duration=0.5,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω—Ü–∞ —Ä–µ—á–∏
                min_speaking_duration=0.3,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ—á–∏
            ),
            stt=deepgram.STT(
                # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
                model="nova-2-phonecall",  # –ú–æ–¥–µ–ª—å –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
                language="ru",
                smart_format=True,
                punctuate=True,
                diarize=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –æ–¥–Ω–æ–≥–æ –≥–æ–≤–æ—Ä—è—â–µ–≥–æ
            ),
            llm=openai.LLM(
                model="gpt-4o-mini",
                temperature=0.7,
                max_tokens=150,  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            ),
            tts=cartesia.TTS(
                model="sonic-multilingual",
                language="ru",
                voice="87748186-23bb-4158-a1eb-332911b0b708",  # –†—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å
                speed=1.0,
                emotion=["friendly", "helpful"],
            ),
            chat_ctx=chat_context,
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
        assistant.fnc_ctx.ai_functions.extend([
            llm.FunctionContext(
                get_weather,
                description="–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ –†–æ—Å—Å–∏–∏",
            ),
            llm.FunctionContext(
                get_current_time,
                description="–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ",
            ),
            llm.FunctionContext(
                get_company_info,
                description="–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏ Stellar Agents",
            ),
            llm.FunctionContext(
                end_call,
                description="–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–≤–æ–Ω–æ–∫ –ø–æ –ø—Ä–æ—Å—å–±–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            ),
        ])
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        assistant.start(ctx.room)
        
        logger.info(f"‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω –¥–ª—è –∑–≤–æ–Ω—è—â–µ–≥–æ: {caller_id}")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∫–æ–º–Ω–∞—Ç—ã
        @ctx.room.on("participant_connected")
        def on_participant_connected(participant: rtc.RemoteParticipant):
            logger.info(f"üë§ –£—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: {participant.identity}")
            
            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
            asyncio.create_task(
                assistant.say("–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ò–ò –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")
            )
        
        @ctx.room.on("participant_disconnected")
        def on_participant_disconnected(participant: rtc.RemoteParticipant):
            logger.info(f"üëã –£—á–∞—Å—Ç–Ω–∏–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è: {participant.identity}")
        
        # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
        await asyncio.Event().wait()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞: {e}")
        raise
    finally:
        logger.info("üèÅ –ì–æ–ª–æ—Å–æ–≤–æ–π –∞–≥–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

if __name__ == "__main__":
    cli.run_app(WorkerOptions(entrypoint_fnc=entrypoint))