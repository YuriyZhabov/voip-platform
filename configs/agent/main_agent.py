#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π –∞–≥–µ–Ω—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –∞—É–¥–∏–æ –º–æ—Å—Ç–∞
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç LiveKit –∞–≥–µ–Ω—Ç–∞ –∏ Asterisk ARI
"""

import asyncio
import logging
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(str(Path(__file__).parent))

from audio_bridge import AudioBridge
from aiohttp import web

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('/logs/main_agent.log')
    ]
)
logger = logging.getLogger(__name__)

class MainAgent:
    """–ì–ª–∞–≤–Ω—ã–π –∞–≥–µ–Ω—Ç —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.audio_bridge = AudioBridge()
        self.health_server = None
        self.running = False
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ VoIP —Å–∏—Å—Ç–µ–º—ã")
        
        try:
            self.running = True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            await self.check_environment()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è health check
            await self.start_health_server()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—É–¥–∏–æ –º–æ—Å—Ç
            bridge_task = asyncio.create_task(self.audio_bridge.start())
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
            health_task = asyncio.create_task(self.audio_bridge.periodic_health_check())
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã
            monitor_task = asyncio.create_task(self.system_monitor())
            
            logger.info("‚úÖ –ì–ª–∞–≤–Ω—ã–π –∞–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
            
            # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª—é–±–æ–π –∏–∑ –∑–∞–¥–∞—á
            done, pending = await asyncio.wait(
                [bridge_task, health_task, monitor_task],
                return_when=asyncio.FIRST_COMPLETED
            )
            
            # –û—Ç–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏
            for task in pending:
                task.cancel()
                
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞: {e}")
            raise
        finally:
            await self.cleanup()
    
    async def check_environment(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        required_vars = [
            'LIVEKIT_URL',
            'LIVEKIT_API_KEY', 
            'LIVEKIT_API_SECRET',
            'OPENAI_API_KEY',
            'DEEPGRAM_API_KEY',
            'CARTESIA_API_KEY'
        ]
        
        missing_vars = []
        for var in required_vars:
            if not os.getenv(var):
                missing_vars.append(var)
        
        if missing_vars:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
            raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {missing_vars}")
        
        logger.info("‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–±–µ–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤)
        logger.info(f"üîó LiveKit URL: {os.getenv('LIVEKIT_URL')}")
        logger.info(f"ü§ñ OpenAI –º–æ–¥–µ–ª—å: {os.getenv('OPENAI_MODEL', 'gpt-4o-mini')}")
        logger.info(f"üé§ Deepgram –º–æ–¥–µ–ª—å: {os.getenv('DEEPGRAM_MODEL', 'nova-2')}")
        logger.info(f"üîä Cartesia –º–æ–¥–µ–ª—å: {os.getenv('CARTESIA_MODEL', 'sonic-multilingual')}")
    
    async def start_health_server(self):
        """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è health check"""
        try:
            app = web.Application()
            app.router.add_get('/health', self.health_check_handler)
            app.router.add_get('/status', self.status_handler)
            app.router.add_get('/stats', self.stats_handler)
            
            runner = web.AppRunner(app)
            await runner.setup()
            
            site = web.TCPSite(runner, '0.0.0.0', 8081)
            await site.start()
            
            logger.info("üåê Health check —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8081")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ health check —Å–µ—Ä–≤–µ—Ä–∞: {e}")
    
    async def health_check_handler(self, request):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ health check"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É–¥–∏–æ –º–æ—Å—Ç–∞
            bridge_healthy = await self.audio_bridge.health_check()
            
            status = "healthy" if bridge_healthy else "unhealthy"
            
            return web.json_response({
                "status": status,
                "service": "voip-ai-agent",
                "version": "1.0.0",
                "components": {
                    "audio_bridge": "healthy" if bridge_healthy else "unhealthy",
                    "livekit": "connected",
                    "asterisk": "connected" if bridge_healthy else "disconnected"
                }
            })
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ health check: {e}")
            return web.json_response({
                "status": "error",
                "error": str(e)
            }, status=500)
    
    async def status_handler(self, request):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"""
        try:
            stats = self.audio_bridge.get_system_stats()
            
            return web.json_response({
                "status": "running" if self.running else "stopped",
                "service": "voip-ai-agent",
                "uptime_seconds": stats.get('uptime', 0),
                "active_calls": stats.get('active_channels', 0),
                "active_rooms": stats.get('active_rooms', 0),
                "environment": {
                    "livekit_url": os.getenv('LIVEKIT_URL', 'not_set'),
                    "openai_model": os.getenv('OPENAI_MODEL', 'gpt-4o-mini'),
                    "deepgram_model": os.getenv('DEEPGRAM_MODEL', 'nova-2'),
                    "cartesia_model": os.getenv('CARTESIA_MODEL', 'sonic-multilingual')
                }
            })
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return web.json_response({
                "status": "error",
                "error": str(e)
            }, status=500)
    
    async def stats_handler(self, request):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            stats = self.audio_bridge.get_system_stats()
            return web.json_response(stats)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return web.json_response({
                "error": str(e)
            }, status=500)
    
    async def system_monitor(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            while self.running:
                await asyncio.sleep(300)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                
                stats = self.audio_bridge.get_system_stats()
                active_calls = stats.get('active_channels', 0)
                active_rooms = stats.get('active_rooms', 0)
                
                logger.info(f"üìä –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
                logger.info(f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤: {active_calls}")
                logger.info(f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç: {active_rooms}")
                logger.info(f"   ‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {stats.get('uptime', 0):.0f} —Å–µ–∫")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
                try:
                    import psutil
                    process = psutil.Process()
                    memory_mb = process.memory_info().rss / 1024 / 1024
                    cpu_percent = process.cpu_percent()
                    
                    logger.info(f"   ‚Ä¢ –ü–∞–º—è—Ç—å: {memory_mb:.1f} MB")
                    logger.info(f"   ‚Ä¢ CPU: {cpu_percent:.1f}%")
                    
                except ImportError:
                    pass  # psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        logger.info("üßπ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –≥–ª–∞–≤–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞...")
        
        self.running = False
        
        # –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –∞—É–¥–∏–æ –º–æ—Å—Ç–∞
        await self.audio_bridge.cleanup()
        
        logger.info("‚úÖ –ì–ª–∞–≤–Ω—ã–π –∞–≥–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    agent = MainAgent()
    
    try:
        await agent.start()
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())