#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π –∞–≥–µ–Ω—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –∞—É–¥–∏–æ –º–æ—Å—Ç–∞
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç LiveKit –∞–≥–µ–Ω—Ç–∞ –∏ Asterisk ARI
"""

import asyncio
import logging
import os
import sys
import json
from pathlib import Path
from typing import Dict, Optional

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(str(Path(__file__).parent))

import aiohttp
from aiohttp import web
from livekit import api, rtc
from livekit.agents import JobContext, WorkerOptions, cli
from livekit.agents.voice_assistant import VoiceAssistant
from livekit.plugins import deepgram, openai, cartesia, silero

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('/logs/main_agent.log')
    ]
)
logger = logging.getLogger(__name__)

class MainAgent:
    """–ì–ª–∞–≤–Ω—ã–π –∞–≥–µ–Ω—Ç —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ARI
        self.ari_url = os.getenv('ARI_URL', 'http://freepbx-server:8088')
        self.ari_username = os.getenv('ARI_USERNAME', 'livekit-agent')
        self.ari_password = os.getenv('ARI_PASSWORD', 'livekit_ari_secret')
        
        # LiveKit –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.livekit_url = os.getenv('LIVEKIT_URL')
        self.livekit_api_key = os.getenv('LIVEKIT_API_KEY')
        self.livekit_api_secret = os.getenv('LIVEKIT_API_SECRET')
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.health_server = None
        self.running = False
        self.ari_ws = None
        self.session = None
        self.active_channels: Dict[str, Dict] = {}
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ VoIP —Å–∏—Å—Ç–µ–º—ã")
        
        try:
            self.running = True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            await self.check_environment()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è health check
            await self.start_health_server()
            
            # –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Å—Å–∏—é
            self.session = aiohttp.ClientSession()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º ARI –∫–ª–∏–µ–Ω—Ç
            ari_task = asyncio.create_task(self.start_ari_client())
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã
            monitor_task = asyncio.create_task(self.system_monitor())
            
            logger.info("‚úÖ –ì–ª–∞–≤–Ω—ã–π –∞–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
            
            # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª—é–±–æ–π –∏–∑ –∑–∞–¥–∞—á
            done, pending = await asyncio.wait(
                [ari_task, monitor_task],
                return_when=asyncio.FIRST_COMPLETED
            )
            
            # –û—Ç–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏
            for task in pending:
                task.cancel()
                
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞: {e}")
            raise
        finally:
            await self.cleanup()
    
    async def check_environment(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        required_vars = [
            'LIVEKIT_URL',
            'LIVEKIT_API_KEY', 
            'LIVEKIT_API_SECRET',
            'OPENAI_API_KEY',
            'DEEPGRAM_API_KEY',
            'CARTESIA_API_KEY'
        ]
        
        missing_vars = []
        for var in required_vars:
            if not os.getenv(var):
                missing_vars.append(var)
        
        if missing_vars:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
            raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {missing_vars}")
        
        logger.info("‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–±–µ–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤)
        logger.info(f"üîó LiveKit URL: {os.getenv('LIVEKIT_URL')}")
        logger.info(f"ü§ñ OpenAI –º–æ–¥–µ–ª—å: {os.getenv('OPENAI_MODEL', 'gpt-4o-mini')}")
        logger.info(f"üé§ Deepgram –º–æ–¥–µ–ª—å: {os.getenv('DEEPGRAM_MODEL', 'nova-2')}")
        logger.info(f"üîä Cartesia –º–æ–¥–µ–ª—å: {os.getenv('CARTESIA_MODEL', 'sonic-multilingual')}")
    
    async def start_health_server(self):
        """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è health check"""
        try:
            app = web.Application()
            app.router.add_get('/health', self.health_check_handler)
            app.router.add_get('/status', self.status_handler)
            app.router.add_get('/stats', self.stats_handler)
            
            runner = web.AppRunner(app)
            await runner.setup()
            
            site = web.TCPSite(runner, '0.0.0.0', 8081)
            await site.start()
            
            logger.info("üåê Health check —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8081")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ health check —Å–µ—Ä–≤–µ—Ä–∞: {e}")
    
    async def health_check_handler(self, request):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ health check"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É–¥–∏–æ –º–æ—Å—Ç–∞
            bridge_healthy = await self.audio_bridge.health_check()
            
            status = "healthy" if bridge_healthy else "unhealthy"
            
            return web.json_response({
                "status": status,
                "service": "voip-ai-agent",
                "version": "1.0.0",
                "components": {
                    "audio_bridge": "healthy" if bridge_healthy else "unhealthy",
                    "livekit": "connected",
                    "asterisk": "connected" if bridge_healthy else "disconnected"
                }
            })
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ health check: {e}")
            return web.json_response({
                "status": "error",
                "error": str(e)
            }, status=500)
    
    async def status_handler(self, request):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"""
        try:
            stats = self.audio_bridge.get_system_stats()
            
            return web.json_response({
                "status": "running" if self.running else "stopped",
                "service": "voip-ai-agent",
                "uptime_seconds": stats.get('uptime', 0),
                "active_calls": stats.get('active_channels', 0),
                "active_rooms": stats.get('active_rooms', 0),
                "environment": {
                    "livekit_url": os.getenv('LIVEKIT_URL', 'not_set'),
                    "openai_model": os.getenv('OPENAI_MODEL', 'gpt-4o-mini'),
                    "deepgram_model": os.getenv('DEEPGRAM_MODEL', 'nova-2'),
                    "cartesia_model": os.getenv('CARTESIA_MODEL', 'sonic-multilingual')
                }
            })
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return web.json_response({
                "status": "error",
                "error": str(e)
            }, status=500)
    
    async def stats_handler(self, request):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            stats = self.audio_bridge.get_system_stats()
            return web.json_response(stats)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return web.json_response({
                "error": str(e)
            }, status=500)
    
    async def system_monitor(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            while self.running:
                await asyncio.sleep(300)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                
                stats = self.audio_bridge.get_system_stats()
                active_calls = stats.get('active_channels', 0)
                active_rooms = stats.get('active_rooms', 0)
                
                logger.info(f"üìä –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
                logger.info(f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤: {active_calls}")
                logger.info(f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç: {active_rooms}")
                logger.info(f"   ‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {stats.get('uptime', 0):.0f} —Å–µ–∫")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
                try:
                    import psutil
                    process = psutil.Process()
                    memory_mb = process.memory_info().rss / 1024 / 1024
                    cpu_percent = process.cpu_percent()
                    
                    logger.info(f"   ‚Ä¢ –ü–∞–º—è—Ç—å: {memory_mb:.1f} MB")
                    logger.info(f"   ‚Ä¢ CPU: {cpu_percent:.1f}%")
                    
                except ImportError:
                    pass  # psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
    
    async def start_ari_client(self):
        """–ó–∞–ø—É—Å–∫ ARI –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            logger.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ARI...")
            
            # –û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Asterisk
            await self.wait_for_asterisk()
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ ARI WebSocket
            await self.connect_to_ari()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ ARI –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            raise
    
    async def wait_for_asterisk(self):
        """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Asterisk"""
        max_attempts = 30
        for attempt in range(max_attempts):
            try:
                url = f"{self.ari_url}/ari/asterisk/info"
                async with self.session.get(
                    url,
                    auth=aiohttp.BasicAuth(self.ari_username, self.ari_password)
                ) as response:
                    if response.status == 200:
                        logger.info("‚úÖ Asterisk –≥–æ—Ç–æ–≤")
                        return
            except Exception:
                pass
            
            await asyncio.sleep(2)
        
        raise Exception("Asterisk –Ω–µ –≥–æ—Ç–æ–≤")
    
    async def connect_to_ari(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ARI WebSocket"""
        ws_url = f"{self.ari_url}/ari/events"
        params = {
            'api_key': self.ari_username,
            'api_secret': self.ari_password,
            'app': 'livekit-agent'
        }
        
        logger.info(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ARI WebSocket: {ws_url}")
        
        try:
            self.ari_ws = await self.session.ws_connect(
                ws_url,
                params=params,
                auth=aiohttp.BasicAuth(self.ari_username, self.ari_password)
            )
            
            logger.info("‚úÖ ARI WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω")
            await self.handle_ari_events()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ARI: {e}")
            raise
    
    async def handle_ari_events(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –æ—Ç ARI"""
        logger.info("üëÇ –ù–∞—á–∞–ª–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è ARI —Å–æ–±—ã—Ç–∏–π...")
        
        try:
            async for msg in self.ari_ws:
                if msg.type == aiohttp.WSMsgType.TEXT:
                    try:
                        event = json.loads(msg.data)
                        await self.process_ari_event(event)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ ARI —Å–æ–±—ã—Ç–∏–π: {e}")
    
    async def process_ari_event(self, event: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ ARI —Å–æ–±—ã—Ç–∏—è"""
        event_type = event.get('type')
        
        if event_type == 'StasisStart':
            await self.handle_call_start(event)
        elif event_type == 'StasisEnd':
            await self.handle_call_end(event)
    
    async def handle_call_start(self, event: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–≤–æ–Ω–∫–∞"""
        channel = event.get('channel', {})
        channel_id = channel.get('id')
        caller_id = channel.get('caller', {}).get('number', 'Unknown')
        
        logger.info(f"üìû –ù–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫: {caller_id} -> –∫–∞–Ω–∞–ª {channel_id}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        self.active_channels[channel_id] = {
            'id': channel_id,
            'caller_id': caller_id,
            'state': channel.get('state'),
            'start_time': asyncio.get_event_loop().time()
        }
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–≤–æ–Ω–æ–∫
        await self.answer_channel(channel_id)
        
        # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        await self.play_greeting(channel_id)
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É –ò–ò –∞–≥–µ–Ω—Ç–∞
        await self.simulate_ai_conversation(channel_id)
    
    async def handle_call_end(self, event: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞"""
        channel = event.get('channel', {})
        channel_id = channel.get('id')
        
        logger.info(f"üìû –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
        
        if channel_id in self.active_channels:
            del self.active_channels[channel_id]
    
    async def answer_channel(self, channel_id: str):
        """–û—Ç–≤–µ—Ç –Ω–∞ –∑–≤–æ–Ω–æ–∫"""
        try:
            url = f"{self.ari_url}/ari/channels/{channel_id}/answer"
            async with self.session.post(
                url,
                auth=aiohttp.BasicAuth(self.ari_username, self.ari_password)
            ) as response:
                if response.status == 204:
                    logger.info(f"‚úÖ –ö–∞–Ω–∞–ª {channel_id} –æ—Ç–≤–µ—á–µ–Ω")
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: {response.status}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–∞–Ω–∞–ª: {e}")
    
    async def play_greeting(self, channel_id: str):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
        try:
            url = f"{self.ari_url}/ari/channels/{channel_id}/play"
            data = {"media": "sound:hello-world"}
            
            async with self.session.post(
                url,
                auth=aiohttp.BasicAuth(self.ari_username, self.ari_password),
                json=data
            ) as response:
                if response.status == 201:
                    logger.info(f"üéµ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –¥–ª—è {channel_id}")
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {response.status}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")
    
    async def simulate_ai_conversation(self, channel_id: str):
        """–ò–º–∏—Ç–∞—Ü–∏—è –ò–ò —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        try:
            logger.info(f"ü§ñ –ò–º–∏—Ç–∞—Ü–∏—è –ò–ò —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è {channel_id}")
            
            # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            await asyncio.sleep(10)
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–≤–æ–Ω–æ–∫
            await self.hangup_channel(channel_id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {e}")
    
    async def hangup_channel(self, channel_id: str):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞"""
        try:
            url = f"{self.ari_url}/ari/channels/{channel_id}"
            async with self.session.delete(
                url,
                auth=aiohttp.BasicAuth(self.ari_username, self.ari_password)
            ) as response:
                if response.status == 204:
                    logger.info(f"üìû –ö–∞–Ω–∞–ª {channel_id} –∑–∞–≤–µ—Ä—à–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}")
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        logger.info("üßπ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –≥–ª–∞–≤–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞...")
        
        self.running = False
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket
        if self.ari_ws:
            await self.ari_ws.close()
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP —Å–µ—Å—Å–∏—é
        if self.session:
            await self.session.close()
        
        logger.info("‚úÖ –ì–ª–∞–≤–Ω—ã–π –∞–≥–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    agent = MainAgent()
    
    try:
        await agent.start()
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())