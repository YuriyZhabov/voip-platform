#!/usr/bin/env python3
"""
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π ARI –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import asyncio
import aiohttp
import json
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_minimal_ari():
    """–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç ARI"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    base_url = "http://freepbx-server:8088"
    username = "livekit-agent"
    password = "livekit_ari_secret"
    app_name = "livekit-agent"
    
    try:
        async with aiohttp.ClientSession() as session:
            # 1. –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            async with session.get(
                f"{base_url}/ari/asterisk/info",
                auth=aiohttp.BasicAuth(username, password)
            ) as response:
                if response.status == 200:
                    logger.info("‚úÖ –ë–∞–∑–æ–≤–æ–µ ARI –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                else:
                    logger.error(f"‚ùå –ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {response.status}")
                    return False
            
            # 2. –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ HTTP
            logger.info("–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ HTTP...")
            
            # –°–æ–∑–¥–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ aiohttp
            ws_url = f"{base_url}/ari/events"
            params = {
                'api_key': username,
                'api_secret': password,
                'app': app_name
            }
            
            try:
                async with session.ws_connect(
                    ws_url,
                    params=params,
                    auth=aiohttp.BasicAuth(username, password)
                ) as ws:
                    logger.info("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ aiohttp —É—Å–ø–µ—à–Ω–æ!")
                    
                    # –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    try:
                        msg = await asyncio.wait_for(ws.receive(), timeout=5.0)
                        if msg.type == aiohttp.WSMsgType.TEXT:
                            data = json.loads(msg.data)
                            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {data.get('type', 'unknown')}")
                        else:
                            logger.info("‚úÖ WebSocket —Ä–∞–±–æ—Ç–∞–µ—Ç (–ø–æ–ª—É—á–µ–Ω –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ç–∏–ø)")
                    except asyncio.TimeoutError:
                        logger.info("‚úÖ WebSocket —Ä–∞–±–æ—Ç–∞–µ—Ç (–Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π –∑–∞ 5 —Å–µ–∫)")
                    
                    return True
                    
            except Exception as e:
                logger.error(f"‚ùå WebSocket —á–µ—Ä–µ–∑ aiohttp –æ—à–∏–±–∫–∞: {e}")
                return False
                
    except Exception as e:
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    result = asyncio.run(test_minimal_ari())
    if result:
        print("üéâ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π ARI —Ç–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!")
    else:
        print("üí• –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π ARI —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω!")
    exit(0 if result else 1)