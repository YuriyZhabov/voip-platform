#!/usr/bin/env python3
"""
ARI Watchdog - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ ARI –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ —Å–±–æ–µ
"""
import asyncio
import logging
import subprocess
import time
import requests
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class ARIWatchdog:
    def __init__(self):
        self.asterisk_host = "freepbx-server"
        self.asterisk_port = 8088
        self.ari_username = "livekit-agent"
        self.ari_password = "livekit_ari_secret"
        self.check_interval = 30  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        self.restart_delay = 5    # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
        self.max_restart_attempts = 3
        self.restart_count = 0
        self.last_restart_time = 0
        
    def check_ari_registration(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –ª–∏ ARI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
        try:
            url = f"http://{self.asterisk_host}:{self.asterisk_port}/ari/applications"
            response = requests.get(
                url,
                auth=(self.ari_username, self.ari_password),
                timeout=10
            )
            
            if response.status_code == 200:
                apps = response.json()
                for app in apps:
                    if app.get('name') == 'livekit-agent':
                        logger.debug("ARI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ livekit-agent –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ")
                        return True
                        
            logger.warning("ARI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ livekit-agent –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ARI —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    def kill_existing_ari_processes(self):
        """–£–±–∏–≤–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã ARI –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            # –ò—â–µ–º –∏ —É–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã ARI –∫–ª–∏–µ–Ω—Ç–∞
            result = subprocess.run(
                ["pgrep", "-f", "fixed_ari_client.py"],
                capture_output=True,
                text=True
            )
            
            if result.returncode == 0:
                pids = result.stdout.strip().split('\n')
                for pid in pids:
                    if pid:
                        try:
                            subprocess.run(["kill", "-9", pid], check=True)
                            logger.info(f"–£–±–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å ARI –∫–ª–∏–µ–Ω—Ç–∞ —Å PID {pid}")
                        except subprocess.CalledProcessError:
                            pass
                            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–±–∏–π—Å—Ç–≤–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ ARI: {e}")
    
    def start_ari_client(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç ARI –∫–ª–∏–µ–Ω—Ç"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ —É–±–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
            self.kill_existing_ari_processes()
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
            time.sleep(self.restart_delay)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å
            process = subprocess.Popen(
                ["python", "/app/fixed_ari_client.py"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                preexec_fn=None
            )
            
            logger.info(f"ARI –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω —Å PID {process.pid}")
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ —É–ø–∞–ª —Å—Ä–∞–∑—É
            time.sleep(3)
            if process.poll() is None:
                logger.info("ARI –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
                return True
            else:
                logger.error("ARI –∫–ª–∏–µ–Ω—Ç —É–ø–∞–ª —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ARI –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            return False
    
    def should_restart(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å (–∑–∞—â–∏—Ç–∞ –æ—Ç —á–∞—Å—Ç—ã—Ö –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤)"""
        current_time = time.time()
        
        # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 5 –º–∏–Ω—É—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        if current_time - self.last_restart_time > 300:
            self.restart_count = 0
        
        # –ù–µ –±–æ–ª–µ–µ 3 –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ –∑–∞ 5 –º–∏–Ω—É—Ç
        if self.restart_count >= self.max_restart_attempts:
            logger.warning(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ ({self.max_restart_attempts})")
            return False
            
        return True
    
    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª watchdog"""
        logger.info("üêï ARI Watchdog –∑–∞–ø—É—â–µ–Ω")
        
        while True:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é ARI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                if not self.check_ari_registration():
                    logger.warning("‚ö†Ô∏è ARI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ")
                    
                    if self.should_restart():
                        logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ ARI –∫–ª–∏–µ–Ω—Ç–∞...")
                        
                        if self.start_ari_client():
                            self.restart_count += 1
                            self.last_restart_time = time.time()
                            
                            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
                            await asyncio.sleep(10)
                            
                            if self.check_ari_registration():
                                logger.info("‚úÖ ARI –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                            else:
                                logger.error("‚ùå ARI –∫–ª–∏–µ–Ω—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω, –Ω–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                        else:
                            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å ARI –∫–ª–∏–µ–Ω—Ç")
                    else:
                        logger.warning("‚è∏Ô∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –æ—Ç–ª–æ–∂–µ–Ω –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–∞ –ø–æ–ø—ã—Ç–æ–∫")
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                await asyncio.sleep(self.check_interval)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ watchdog: {e}")
                await asyncio.sleep(self.check_interval)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    watchdog = ARIWatchdog()
    await watchdog.run()

if __name__ == "__main__":
    asyncio.run(main())