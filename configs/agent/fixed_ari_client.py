#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π ARI –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Asterisk —Å LiveKit
"""

import asyncio
import json
import logging
import os
import sys
from typing import Dict, Optional
import aiohttp
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class FixedARIClient:
    def __init__(self):
        self.ari_url = os.getenv('ARI_URL', 'http://freepbx-server:8088')
        self.ari_username = os.getenv('ARI_USERNAME', 'livekit-agent')
        self.ari_password = os.getenv('ARI_PASSWORD', 'livekit_ari_secret')
        self.app_name = 'livekit-agent'
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        self.active_channels: Dict[str, Dict] = {}
        
        # WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        self.ws_connection = None
        self.session = None
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ ARI –∫–ª–∏–µ–Ω—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ Fixed ARI Client...")
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ HTTP —Å–µ—Å—Å–∏–∏
            self.session = aiohttp.ClientSession()
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ARI WebSocket
            await self.connect_websocket()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ARI –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            await self.cleanup()
            raise
    
    async def connect_websocket(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ARI WebSocket"""
        ws_url = f"{self.ari_url}/ari/events"
        
        params = {
            'api_key': self.ari_username,
            'api_secret': self.ari_password,
            'app': self.app_name
        }
        
        logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket: {ws_url}")
        
        try:
            self.ws_connection = await self.session.ws_connect(
                ws_url,
                params=params,
                auth=aiohttp.BasicAuth(self.ari_username, self.ari_password)
            )
            logger.info("WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
            await self.handle_events()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket: {e}")
            raise
    
    async def handle_events(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –æ—Ç Asterisk"""
        logger.info("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π...")
        
        try:
            async for msg in self.ws_connection:
                if msg.type == aiohttp.WSMsgType.TEXT:
                    try:
                        event = json.loads(msg.data)
                        await self.process_event(event)
                    except json.JSONDecodeError as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
                elif msg.type == aiohttp.WSMsgType.ERROR:
                    logger.error(f"WebSocket –æ—à–∏–±–∫–∞: {self.ws_connection.exception()}")
                    break
                elif msg.type == aiohttp.WSMsgType.CLOSE:
                    logger.info("WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
                    break
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏–π: {e}")
    
    async def process_event(self, event: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
        event_type = event.get('type')
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {event_type}")
        
        if event_type == 'StasisStart':
            await self.handle_stasis_start(event)
        elif event_type == 'StasisEnd':
            await self.handle_stasis_end(event)
        elif event_type == 'ChannelHangupRequest':
            await self.handle_hangup_request(event)
        elif event_type == 'ChannelStateChange':
            await self.handle_channel_state_change(event)
        else:
            logger.debug(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: {event_type}")
    
    async def handle_stasis_start(self, event: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ Stasis –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        channel = event.get('channel', {})
        channel_id = channel.get('id')
        channel_name = channel.get('name')
        
        logger.info(f"Stasis Start –¥–ª—è –∫–∞–Ω–∞–ª–∞: {channel_name} ({channel_id})")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ
        self.active_channels[channel_id] = {
            'id': channel_id,
            'name': channel_name,
            'state': channel.get('state'),
            'caller_id': channel.get('caller', {}).get('number'),
            'start_time': datetime.now().isoformat(),
            'args': event.get('args', [])
        }
        
        # –û—Ç–≤–µ—Ç –Ω–∞ –∑–≤–æ–Ω–æ–∫ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –æ—Ç–≤–µ—á–µ–Ω
        if channel.get('state') == 'Ring':
            await self.answer_channel(channel_id)
        
        # –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å LiveKit
        await self.start_livekit_integration(channel_id)
    
    async def handle_stasis_end(self, event: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è Stasis –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        channel = event.get('channel', {})
        channel_id = channel.get('id')
        
        logger.info(f"Stasis End –¥–ª—è –∫–∞–Ω–∞–ª–∞: {channel_id}")
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        if channel_id in self.active_channels:
            channel_info = self.active_channels.pop(channel_id)
            logger.info(f"–ö–∞–Ω–∞–ª {channel_id} —É–¥–∞–ª–µ–Ω –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö")
    
    async def handle_hangup_request(self, event: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞"""
        channel = event.get('channel', {})
        channel_id = channel.get('id')
        
        logger.info(f"Hangup request –¥–ª—è –∫–∞–Ω–∞–ª–∞: {channel_id}")
    
    async def handle_channel_state_change(self, event: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
        channel = event.get('channel', {})
        channel_id = channel.get('id')
        new_state = channel.get('state')
        
        if channel_id in self.active_channels:
            old_state = self.active_channels[channel_id].get('state')
            self.active_channels[channel_id]['state'] = new_state
            
            logger.info(f"–ö–∞–Ω–∞–ª {channel_id}: {old_state} -> {new_state}")
    
    async def answer_channel(self, channel_id: str):
        """–û—Ç–≤–µ—Ç –Ω–∞ –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫"""
        try:
            url = f"{self.ari_url}/ari/channels/{channel_id}/answer"
            
            async with self.session.post(
                url,
                auth=aiohttp.BasicAuth(self.ari_username, self.ari_password)
            ) as response:
                if response.status == 204:
                    logger.info(f"–ö–∞–Ω–∞–ª {channel_id} –æ—Ç–≤–µ—á–µ–Ω")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–∞–Ω–∞–ª {channel_id}: {response.status}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –∫–∞–Ω–∞–ª {channel_id}: {e}")
    
    async def start_livekit_integration(self, channel_id: str):
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å LiveKit"""
        try:
            channel_info = self.active_channels.get(channel_id, {})
            caller_id = channel_info.get('caller_id', 'Unknown')
            
            logger.info(f"üé§ –ó–∞–ø—É—Å–∫ LiveKit –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}, caller: {caller_id}")
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –∫–æ–º–Ω–∞—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ ID –∫–∞–Ω–∞–ª–∞
            room_name = f"call-{channel_id}"
            
            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.play_ai_greeting(channel_id)
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            await asyncio.sleep(3)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–∏—Ç–∞—Ü–∏—é AI —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            await self.simulate_ai_conversation(channel_id)
            
            logger.info(f"üè† LiveKit –∫–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: {room_name}")
            logger.info(f"üìû –ó–≤–æ–Ω–æ–∫ –æ—Ç {caller_id} –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å LiveKit –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
    
    async def simulate_ai_conversation(self, channel_id: str):
        """–ò–º–∏—Ç–∞—Ü–∏—è AI —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        try:
            logger.info(f"ü§ñ –ó–∞–ø—É—Å–∫ –∏–º–∏—Ç–∞—Ü–∏–∏ AI —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
            
            # –î–µ—Ä–∂–∏–º –∫–∞–Ω–∞–ª –æ—Ç–∫—Ä—ã—Ç—ã–º –Ω–∞ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            await asyncio.sleep(30)
            
            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –ø—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.play_goodbye_message(channel_id)
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            await asyncio.sleep(3)
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–≤–æ–Ω–æ–∫
            await self.hangup_channel(channel_id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–º–∏—Ç–∞—Ü–∏–∏ AI —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
    
    async def hangup_channel(self, channel_id: str):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞"""
        try:
            url = f"{self.ari_url}/ari/channels/{channel_id}"
            
            async with self.session.delete(
                url,
                auth=aiohttp.BasicAuth(self.ari_username, self.ari_password)
            ) as response:
                if response.status == 204:
                    logger.info(f"üìû –ö–∞–Ω–∞–ª {channel_id} –∑–∞–≤–µ—Ä—à–µ–Ω")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ {channel_id}: {response.status}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
    
    async def play_ai_greeting(self, channel_id: str):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
        try:
            url = f"{self.ari_url}/ari/channels/{channel_id}/play"
            
            data = {
                'media': 'sound:hello-world'  # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ AI
            }
            
            async with self.session.post(
                url,
                auth=aiohttp.BasicAuth(self.ari_username, self.ari_password),
                json=data
            ) as response:
                if response.status == 201:
                    logger.info(f"ü§ñ AI –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}: {response.status}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
    
    async def play_goodbye_message(self, channel_id: str):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–æ—â–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            url = f"{self.ari_url}/ari/channels/{channel_id}/play"
            
            data = {
                'media': 'sound:goodbye'  # –ü—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            }
            
            async with self.session.post(
                url,
                auth=aiohttp.BasicAuth(self.ari_username, self.ari_password),
                json=data
            ) as response:
                if response.status == 201:
                    logger.info(f"üëã –ü—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø—Ä–æ—â–∞–Ω–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}: {response.status}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø—Ä–æ—â–∞–Ω–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
    
    async def play_connecting_message(self, channel_id: str):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏"""
        try:
            url = f"{self.ari_url}/ari/channels/{channel_id}/play"
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ
            data = {
                'media': 'sound:hello-world'  # –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            }
            
            async with self.session.post(
                url,
                auth=aiohttp.BasicAuth(self.ari_username, self.ari_password),
                json=data
            ) as response:
                if response.status == 201:
                    logger.info(f"üîä –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}: {response.status}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
    
    async def create_livekit_room(self, room_name: str, caller_id: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ LiveKit –∫–æ–º–Ω–∞—Ç—ã"""
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è LiveKit –∫–æ–º–Ω–∞—Ç—ã
            # –ò—Å–ø–æ–ª—å–∑—É—è LiveKit API
            logger.info(f"üè† –°–æ–∑–¥–∞–Ω–∏–µ LiveKit –∫–æ–º–Ω–∞—Ç—ã: {room_name} –¥–ª—è {caller_id}")
            
            # –ü–æ–∫–∞ —á—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
            return {"room_name": room_name, "status": "created"}
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è LiveKit –∫–æ–º–Ω–∞—Ç—ã {room_name}: {e}")
            return None
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        logger.info("–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ ARI –∫–ª–∏–µ–Ω—Ç–∞...")
        
        if self.ws_connection:
            await self.ws_connection.close()
        
        if self.session:
            await self.session.close()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    client = FixedARIClient()
    
    try:
        await client.start()
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await client.cleanup()

if __name__ == "__main__":
    asyncio.run(main())