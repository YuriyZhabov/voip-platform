#!/usr/bin/env python3
"""
–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π ARI –∫–ª–∏–µ–Ω—Ç
"""

import asyncio
import aiohttp
import json
import logging
import signal
import sys

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class PersistentARIClient:
    def __init__(self):
        self.base_url = "http://freepbx-server:8088"
        self.username = "livekit-agent"
        self.password = "livekit_ari_secret"
        self.app_name = "livekit-agent"
        self.session = None
        self.ws = None
        self.running = True
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ ARI –∫–ª–∏–µ–Ω—Ç–∞...")
        
        self.session = aiohttp.ClientSession()
        
        try:
            await self.connect_websocket()
            await self.handle_events()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ ARI –∫–ª–∏–µ–Ω—Ç–µ: {e}")
        finally:
            await self.cleanup()
    
    async def connect_websocket(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket"""
        ws_url = f"{self.base_url}/ari/events"
        params = {
            'api_key': self.username,
            'api_secret': self.password,
            'app': self.app_name
        }
        
        logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ARI WebSocket: {ws_url}")
        
        self.ws = await self.session.ws_connect(
            ws_url,
            params=params,
            auth=aiohttp.BasicAuth(self.username, self.password)
        )
        
        logger.info("‚úÖ ARI WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω!")
    
    async def handle_events(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π"""
        logger.info("üéß –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π ARI...")
        
        try:
            while self.running:
                msg = await self.ws.receive()
                
                if msg.type == aiohttp.WSMsgType.TEXT:
                    try:
                        event = json.loads(msg.data)
                        await self.process_event(event)
                    except json.JSONDecodeError as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                        
                elif msg.type == aiohttp.WSMsgType.ERROR:
                    logger.error(f"WebSocket –æ—à–∏–±–∫–∞: {self.ws.exception()}")
                    break
                    
                elif msg.type == aiohttp.WSMsgType.CLOSE:
                    logger.info("WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
                    break
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π: {e}")
    
    async def process_event(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è"""
        event_type = event.get('type', 'unknown')
        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {event_type}")
        
        if event_type == 'StasisStart':
            channel = event.get('channel', {})
            channel_id = channel.get('id')
            logger.info(f"üî• –ù–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫ –≤ Stasis: {channel_id}")
            
        elif event_type == 'StasisEnd':
            channel = event.get('channel', {})
            channel_id = channel.get('id')
            logger.info(f"üîö –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: {channel_id}")
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        
        if self.ws:
            await self.ws.close()
        
        if self.session:
            await self.session.close()
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ ARI –∫–ª–∏–µ–Ω—Ç–∞...")
        self.running = False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    client = PersistentARIClient()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    def signal_handler(signum, frame):
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}")
        client.stop()
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        await client.start()
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω Ctrl+C")
        client.stop()

if __name__ == "__main__":
    asyncio.run(main())