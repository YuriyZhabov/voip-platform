#!/usr/bin/env python3
"""
–ê—É–¥–∏–æ –º–æ—Å—Ç –º–µ–∂–¥—É Asterisk –∏ LiveKit
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–¥–∞—á—É –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import asyncio
import logging
import json
import os
import websockets
import aiohttp
from typing import Dict, Optional
from livekit import api, rtc
from livekit.agents import JobContext, WorkerOptions, cli
from livekit.agents.voice_assistant import VoiceAssistant
from livekit.plugins import deepgram, openai, cartesia, silero

logger = logging.getLogger(__name__)

class AudioBridge:
    """–ú–æ—Å—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∞—É–¥–∏–æ –º–µ–∂–¥—É Asterisk –∏ LiveKit"""
    
    def __init__(self):
        self.ari_url = os.getenv('ARI_URL', 'http://freepbx-server:8088')
        self.ari_username = os.getenv('ARI_USERNAME', 'livekit-agent')
        self.ari_password = os.getenv('ARI_PASSWORD', 'livekit_ari_secret')
        
        # LiveKit –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.livekit_url = os.getenv('LIVEKIT_URL')
        self.livekit_api_key = os.getenv('LIVEKIT_API_KEY')
        self.livekit_api_secret = os.getenv('LIVEKIT_API_SECRET')
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏ –∫–æ–º–Ω–∞—Ç—ã
        self.active_channels: Dict[str, Dict] = {}
        self.active_rooms: Dict[str, rtc.Room] = {}
        
        # WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        self.ari_ws = None
        self.session = None
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∞—É–¥–∏–æ –º–æ—Å—Ç–∞"""
        logger.info("üåâ –ó–∞–ø—É—Å–∫ –∞—É–¥–∏–æ –º–æ—Å—Ç–∞ Asterisk <-> LiveKit")
        
        try:
            self.session = aiohttp.ClientSession()
            await self.connect_to_ari()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞—É–¥–∏–æ –º–æ—Å—Ç–∞: {e}")
            raise
    
    async def connect_to_ari(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Asterisk ARI"""
        ws_url = f"{self.ari_url}/ari/events"
        params = {
            'api_key': self.ari_username,
            'api_secret': self.ari_password,
            'app': 'livekit-agent'
        }
        
        logger.info(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ARI: {ws_url}")
        
        try:
            self.ari_ws = await self.session.ws_connect(
                ws_url,
                params=params,
                auth=aiohttp.BasicAuth(self.ari_username, self.ari_password)
            )
            
            logger.info("‚úÖ ARI WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω")
            await self.handle_ari_events()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ARI: {e}")
            raise
    
    async def handle_ari_events(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –æ—Ç Asterisk ARI"""
        logger.info("üëÇ –ù–∞—á–∞–ª–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è ARI —Å–æ–±—ã—Ç–∏–π...")
        
        try:
            async for msg in self.ari_ws:
                if msg.type == aiohttp.WSMsgType.TEXT:
                    try:
                        event = json.loads(msg.data)
                        await self.process_ari_event(event)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ARI —Å–æ–±—ã—Ç–∏—è: {e}")
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ ARI —Å–æ–±—ã—Ç–∏–π: {e}")
    
    async def process_ari_event(self, event: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ ARI —Å–æ–±—ã—Ç–∏—è"""
        event_type = event.get('type')
        
        if event_type == 'StasisStart':
            await self.handle_call_start(event)
        elif event_type == 'StasisEnd':
            await self.handle_call_end(event)
        elif event_type == 'ChannelStateChange':
            await self.handle_channel_state_change(event)
    
    async def handle_call_start(self, event: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–≤–æ–Ω–∫–∞"""
        channel = event.get('channel', {})
        channel_id = channel.get('id')
        caller_id = channel.get('caller', {}).get('number', 'Unknown')
        
        logger.info(f"üìû –ù–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫: {caller_id} -> –∫–∞–Ω–∞–ª {channel_id}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        self.active_channels[channel_id] = {
            'id': channel_id,
            'caller_id': caller_id,
            'state': channel.get('state'),
            'start_time': asyncio.get_event_loop().time()
        }
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–≤–æ–Ω–æ–∫
        await self.answer_channel(channel_id)
        
        # –°–æ–∑–¥–∞–µ–º LiveKit –∫–æ–º–Ω–∞—Ç—É –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ò–ò –∞–≥–µ–Ω—Ç–∞
        await self.create_livekit_room_for_call(channel_id, caller_id)
    
    async def answer_channel(self, channel_id: str):
        """–û—Ç–≤–µ—Ç –Ω–∞ –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫"""
        try:
            url = f"{self.ari_url}/ari/channels/{channel_id}/answer"
            
            async with self.session.post(
                url,
                auth=aiohttp.BasicAuth(self.ari_username, self.ari_password)
            ) as response:
                if response.status == 204:
                    logger.info(f"‚úÖ –ö–∞–Ω–∞–ª {channel_id} –æ—Ç–≤–µ—á–µ–Ω")
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–∞–Ω–∞–ª {channel_id}: {response.status}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –∫–∞–Ω–∞–ª {channel_id}: {e}")
    
    async def create_livekit_room_for_call(self, channel_id: str, caller_id: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ LiveKit –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –∑–≤–æ–Ω–∫–∞"""
        try:
            room_name = f"call-{channel_id}"
            
            logger.info(f"üè† –°–æ–∑–¥–∞–Ω–∏–µ LiveKit –∫–æ–º–Ω–∞—Ç—ã: {room_name}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É —á–µ—Ä–µ–∑ LiveKit API
            room_service = api.RoomService()
            room_info = await room_service.create_room(
                api.CreateRoomRequest(name=room_name)
            )
            
            logger.info(f"‚úÖ LiveKit –∫–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: {room_name}")
            
            # –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ –º–æ—Å—Ç –º–µ–∂–¥—É Asterisk –∏ LiveKit
            await self.setup_audio_bridge(channel_id, room_name)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ò–ò –∞–≥–µ–Ω—Ç–∞ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã
            await self.start_ai_agent_for_room(room_name, channel_id, caller_id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è LiveKit –∫–æ–º–Ω–∞—Ç—ã: {e}")
    
    async def setup_audio_bridge(self, channel_id: str, room_name: str):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É–¥–∏–æ –º–æ—Å—Ç–∞ –º–µ–∂–¥—É Asterisk –∏ LiveKit"""
        try:
            logger.info(f"üåâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É–¥–∏–æ –º–æ—Å—Ç–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
            
            # –°–æ–∑–¥–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –∫–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∞—É–¥–∏–æ –≤ LiveKit
            external_channel_data = {
                "endpoint": f"Local/{room_name}@livekit-bridge",
                "app": "livekit-agent",
                "appArgs": f"bridge,{channel_id},{room_name}"
            }
            
            # –°–æ–∑–¥–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –∫–∞–Ω–∞–ª
            url = f"{self.ari_url}/ari/channels/externalMedia"
            async with self.session.post(
                url,
                auth=aiohttp.BasicAuth(self.ari_username, self.ari_password),
                json=external_channel_data
            ) as response:
                if response.status == 201:
                    external_channel = await response.json()
                    external_channel_id = external_channel.get('id')
                    
                    logger.info(f"‚úÖ –í–Ω–µ—à–Ω–∏–π –∫–∞–Ω–∞–ª —Å–æ–∑–¥–∞–Ω: {external_channel_id}")
                    
                    # –°–æ–∑–¥–∞–µ–º –º–æ—Å—Ç –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏
                    await self.create_channel_bridge(channel_id, external_channel_id)
                    
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ –∫–∞–Ω–∞–ª–∞: {response.status}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ –º–æ—Å—Ç–∞: {e}")
    
    async def create_channel_bridge(self, channel1_id: str, channel2_id: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–æ—Å—Ç–∞ –º–µ–∂–¥—É –¥–≤—É–º—è –∫–∞–Ω–∞–ª–∞–º–∏"""
        try:
            # –°–æ–∑–¥–∞–µ–º –º–æ—Å—Ç
            bridge_data = {
                "type": "mixing",
                "name": f"bridge-{channel1_id}"
            }
            
            url = f"{self.ari_url}/ari/bridges"
            async with self.session.post(
                url,
                auth=aiohttp.BasicAuth(self.ari_username, self.ari_password),
                json=bridge_data
            ) as response:
                if response.status == 201:
                    bridge = await response.json()
                    bridge_id = bridge.get('id')
                    
                    logger.info(f"üåâ –ú–æ—Å—Ç —Å–æ–∑–¥–∞–Ω: {bridge_id}")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª—ã –≤ –º–æ—Å—Ç
                    await self.add_channels_to_bridge(bridge_id, [channel1_id, channel2_id])
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ—Å—Ç–µ
                    self.active_channels[channel1_id]['bridge_id'] = bridge_id
                    
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ—Å—Ç–∞: {response.status}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ—Å—Ç–∞ –∫–∞–Ω–∞–ª–æ–≤: {e}")
    
    async def add_channels_to_bridge(self, bridge_id: str, channel_ids: list):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –≤ –º–æ—Å—Ç"""
        try:
            for channel_id in channel_ids:
                url = f"{self.ari_url}/ari/bridges/{bridge_id}/addChannel"
                params = {"channel": channel_id}
                
                async with self.session.post(
                    url,
                    auth=aiohttp.BasicAuth(self.ari_username, self.ari_password),
                    params=params
                ) as response:
                    if response.status == 204:
                        logger.info(f"‚úÖ –ö–∞–Ω–∞–ª {channel_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ—Å—Ç {bridge_id}")
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ {channel_id} –≤ –º–æ—Å—Ç: {response.status}")
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –≤ –º–æ—Å—Ç: {e}")
    
    async def start_ai_agent_for_room(self, room_name: str, channel_id: str, caller_id: str):
        """–ó–∞–ø—É—Å–∫ –ò–ò –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã"""
        try:
            logger.info(f"ü§ñ –ó–∞–ø—É—Å–∫ –ò–ò –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã {room_name}")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –ò–ò –∞–≥–µ–Ω—Ç–∞
            agent_task = asyncio.create_task(
                self.run_ai_agent(room_name, channel_id, caller_id)
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            self.active_channels[channel_id]['agent_task'] = agent_task
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ò–ò –∞–≥–µ–Ω—Ç–∞: {e}")
    
    async def run_ai_agent(self, room_name: str, channel_id: str, caller_id: str):
        """–ó–∞–ø—É—Å–∫ –ò–ò –∞–≥–µ–Ω—Ç–∞ –≤ LiveKit –∫–æ–º–Ω–∞—Ç–µ"""
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ LiveKit –∫–æ–º–Ω–∞—Ç–µ
            room = rtc.Room()
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å —Ä—É—Å—Å–∫–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            assistant = VoiceAssistant(
                vad=silero.VAD.load(),
                stt=deepgram.STT(
                    model="nova-2",
                    language="ru",
                    smart_format=True,
                    interim_results=True
                ),
                llm=openai.LLM(
                    model="gpt-4o-mini",
                    temperature=0.7
                ),
                tts=cartesia.TTS(
                    voice="87748186-23bb-4158-a1eb-332911b0b708",  # –†—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å
                    model="sonic-multilingual",
                    language="ru"
                ),
                chat_ctx=self.create_chat_context(caller_id)
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ò–ò
            assistant.fnc_ctx.ai_functions.extend([
                self.create_weather_function(),
                self.create_time_function(),
                self.create_help_function()
            ])
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
            await room.connect(
                url=self.livekit_url,
                token=self.generate_access_token(room_name, f"ai-agent-{channel_id}")
            )
            
            logger.info(f"üé§ –ò–ò –∞–≥–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–æ–º–Ω–∞—Ç–µ {room_name}")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∫–æ–º–Ω–∞—Ç—ã
            @room.on("participant_connected")
            def on_participant_connected(participant: rtc.RemoteParticipant):
                logger.info(f"üë§ –£—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: {participant.identity}")
            
            @room.on("participant_disconnected")
            def on_participant_disconnected(participant: rtc.RemoteParticipant):
                logger.info(f"üëã –£—á–∞—Å—Ç–Ω–∏–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è: {participant.identity}")
            
            @room.on("track_published")
            def on_track_published(publication: rtc.RemoteTrackPublication, participant: rtc.RemoteParticipant):
                logger.info(f"üéµ –¢—Ä–µ–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: {publication.kind} –æ—Ç {participant.identity}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            assistant.start(room)
            
            # –ñ–¥–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            await asyncio.sleep(2)
            
            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
            greeting_message = (
                f"–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç. "
                f"–Ø –≤–∞—à –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º. "
                f"–í—ã –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è –æ –ø–æ–≥–æ–¥–µ, –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å. "
                f"–ö–∞–∫ –¥–µ–ª–∞?"
            )
            
            await assistant.say(greeting_message)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–Ω–∞—Ç—É –∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            self.active_rooms[channel_id] = {
                'room': room,
                'assistant': assistant,
                'start_time': asyncio.get_event_loop().time()
            }
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–≤–æ–Ω–∫–∞
            await self.monitor_call_activity(channel_id, room, assistant)
            
            logger.info(f"üèÅ –ò–ò –∞–≥–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã –ò–ò –∞–≥–µ–Ω—Ç–∞: {e}")
        finally:
            # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
            await self.cleanup_room_resources(channel_id)
    
    async def monitor_call_activity(self, channel_id: str, room: rtc.Room, assistant: VoiceAssistant):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–≤–æ–Ω–∫–∞"""
        try:
            last_activity = asyncio.get_event_loop().time()
            silence_timeout = 300  # 5 –º–∏–Ω—É—Ç —Ç–∏—à–∏–Ω—ã
            max_call_duration = 1800  # 30 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
            
            while channel_id in self.active_channels:
                current_time = asyncio.get_event_loop().time()
                call_duration = current_time - self.active_channels[channel_id].get('start_time', current_time)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–≤–æ–Ω–∫–∞
                if call_duration > max_call_duration:
                    logger.info(f"‚è∞ –ó–≤–æ–Ω–æ–∫ {channel_id} –ø—Ä–µ–≤—ã—Å–∏–ª –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
                    await assistant.say("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Ä–µ–º—è –Ω–∞—à–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –∫–æ–Ω—Ü—É. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    await asyncio.sleep(3)
                    await self.hangup_channel(channel_id)
                    break
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                if len(room.remote_participants) == 0:
                    silence_duration = current_time - last_activity
                    if silence_duration > silence_timeout:
                        logger.info(f"üîá –ó–≤–æ–Ω–æ–∫ {channel_id} –∑–∞–≤–µ—Ä—à–µ–Ω –∏–∑-–∑–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π —Ç–∏—à–∏–Ω—ã")
                        await self.hangup_channel(channel_id)
                        break
                else:
                    last_activity = current_time
                
                await asyncio.sleep(5)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–≤–æ–Ω–∫–∞: {e}")
    
    async def cleanup_room_resources(self, channel_id: str):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –∫–æ–º–Ω–∞—Ç—ã"""
        try:
            if channel_id in self.active_rooms:
                room_data = self.active_rooms[channel_id]
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                if isinstance(room_data, dict) and 'assistant' in room_data:
                    room_data['assistant'].stop()
                
                # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –∫–æ–º–Ω–∞—Ç—ã
                room = room_data['room'] if isinstance(room_data, dict) else room_data
                if hasattr(room, 'disconnect'):
                    await room.disconnect()
                
                del self.active_rooms[channel_id]
                logger.info(f"üßπ –†–µ—Å—É—Ä—Å—ã –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id} –æ—á–∏—â–µ–Ω—ã")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –∫–æ–º–Ω–∞—Ç—ã: {e}")
    
    def create_weather_function(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã"""
        from livekit.agents import llm
        
        async def get_weather(location: str) -> str:
            """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ"""
            logger.info(f"üå§Ô∏è –ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã –¥–ª—è: {location}")
            
            weather_data = {
                "–º–æ—Å–∫–≤–∞": "–í –ú–æ—Å–∫–≤–µ —Å–µ–π—á–∞—Å –ø–ª—é—Å 2 –≥—Ä–∞–¥—É—Å–∞, –æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏",
                "—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥": "–í –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ –ø–ª—é—Å 1 –≥—Ä–∞–¥—É—Å, –Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å",
                "—Å–ø–±": "–í –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ –ø–ª—é—Å 1 –≥—Ä–∞–¥—É—Å, –Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å",
                "—Å–æ—á–∏": "–í –°–æ—á–∏ –ø–ª—é—Å 12 –≥—Ä–∞–¥—É—Å–æ–≤, —Å–æ–ª–Ω–µ—á–Ω–æ",
                "–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": "–í –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–µ –º–∏–Ω—É—Å 5 –≥—Ä–∞–¥—É—Å–æ–≤, —Å–Ω–µ–≥",
                "–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": "–í –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–µ –º–∏–Ω—É—Å 8 –≥—Ä–∞–¥—É—Å–æ–≤, —è—Å–Ω–æ",
                "–∫–∞–∑–∞–Ω—å": "–í –ö–∞–∑–∞–Ω–∏ –º–∏–Ω—É—Å 2 –≥—Ä–∞–¥—É—Å–∞, –æ–±–ª–∞—á–Ω–æ"
            }
            
            location_lower = location.lower()
            for city, weather in weather_data.items():
                if city in location_lower:
                    return weather
            
            return f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≥–æ–¥–µ –≤ –≥–æ—Ä–æ–¥–µ {location} —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –æ –¥—Ä—É–≥–æ–º –≥–æ—Ä–æ–¥–µ."
        
        return llm.FunctionContext(
            get_weather,
            description="–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ –†–æ—Å—Å–∏–∏"
        )
    
    def create_time_function(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏"""
        from livekit.agents import llm
        import pytz
        from datetime import datetime
        
        async def get_current_time(timezone: str = "Europe/Moscow") -> str:
            """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è"""
            try:
                tz = pytz.timezone(timezone)
                current_time = datetime.now(tz)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
                months = [
                    "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
                    "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"
                ]
                
                weekdays = [
                    "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", 
                    "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
                ]
                
                month_name = months[current_time.month - 1]
                weekday_name = weekdays[current_time.weekday()]
                
                return (
                    f"–°–µ–π—á–∞—Å {current_time.strftime('%H:%M')}, "
                    f"{weekday_name}, {current_time.day} {month_name} "
                    f"{current_time.year} –≥–æ–¥–∞"
                )
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")
                return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è"
        
        return llm.FunctionContext(
            get_current_time,
            description="–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ"
        )
    
    def create_help_function(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–º–æ—â–∏"""
        from livekit.agents import llm
        
        async def get_help() -> str:
            """–ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
            return (
                "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏:\n"
                "‚Ä¢ –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ –†–æ—Å—Å–∏–∏\n"
                "‚Ä¢ –°–æ–æ–±—â–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É\n"
                "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –æ–±—ã—á–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä\n"
                "‚Ä¢ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã\n\n"
                "–ü—Ä–æ—Å—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç–µ —Å–æ –º–Ω–æ–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ —Å –æ–±—ã—á–Ω—ã–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º!"
            )
        
        return llm.FunctionContext(
            get_help,
            description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"
        )
    
    def create_chat_context(self, caller_id: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —á–∞—Ç–∞ –¥–ª—è –ò–ò"""
        from livekit.agents import llm
        
        return llm.ChatContext().append(
            role="system",
            text=(
                f"–í—ã - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ä—É—Å—Å–∫–æ–≥–æ–≤–æ—Ä—è—â–∏–π –ò–ò –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. "
                f"–í—ã —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç–µ —Å –∞–±–æ–Ω–µ–Ω—Ç–æ–º {caller_id}. "
                f"–û—Ç–≤–µ—á–∞–π—Ç–µ –∫—Ä–∞—Ç–∫–æ, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –ø–æ-–¥—Ä—É–∂–µ—Å–∫–∏. "
                f"–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–º–æ—á—å —Å –æ–±—â–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏, —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –ø–æ–≥–æ–¥–µ –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏. "
                f"–ì–æ–≤–æ—Ä–∏—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
            )
        )
    
    def generate_access_token(self, room_name: str, identity: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ LiveKit"""
        try:
            token = api.AccessToken(self.livekit_api_key, self.livekit_api_secret)
            token = token.with_identity(identity).with_name(identity)
            token = token.with_grants(
                api.VideoGrants(
                    room_join=True,
                    room=room_name,
                    can_publish=True,
                    can_subscribe=True
                )
            )
            return token.to_jwt()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
            raise
    
    async def handle_call_end(self, event: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞"""
        channel = event.get('channel', {})
        channel_id = channel.get('id')
        
        logger.info(f"üìû –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ò–ò –∞–≥–µ–Ω—Ç–∞
        if channel_id in self.active_channels:
            channel_info = self.active_channels.pop(channel_id)
            
            # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É –∞–≥–µ–Ω—Ç–∞ –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            if 'agent_task' in channel_info:
                channel_info['agent_task'].cancel()
            
            # –£–¥–∞–ª—è–µ–º –º–æ—Å—Ç –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
            if 'bridge_id' in channel_info:
                await self.cleanup_bridge(channel_info['bridge_id'])
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º LiveKit –∫–æ–º–Ω–∞—Ç—É
        await self.cleanup_room_resources(channel_id)
    
    async def cleanup_bridge(self, bridge_id: str):
        """–û—á–∏—Å—Ç–∫–∞ –º–æ—Å—Ç–∞ –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏"""
        try:
            url = f"{self.ari_url}/ari/bridges/{bridge_id}"
            
            async with self.session.delete(
                url,
                auth=aiohttp.BasicAuth(self.ari_username, self.ari_password)
            ) as response:
                if response.status == 204:
                    logger.info(f"üßπ –ú–æ—Å—Ç {bridge_id} —É–¥–∞–ª–µ–Ω")
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–æ—Å—Ç–∞ {bridge_id}: {response.status}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –º–æ—Å—Ç–∞ {bridge_id}: {e}")
    
    async def hangup_channel(self, channel_id: str):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞"""
        try:
            url = f"{self.ari_url}/ari/channels/{channel_id}"
            
            async with self.session.delete(
                url,
                auth=aiohttp.BasicAuth(self.ari_username, self.ari_password)
            ) as response:
                if response.status == 204:
                    logger.info(f"üìû –ö–∞–Ω–∞–ª {channel_id} –∑–∞–≤–µ—Ä—à–µ–Ω")
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ {channel_id}: {response.status}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
    
    async def get_channel_info(self, channel_id: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ"""
        try:
            url = f"{self.ari_url}/ari/channels/{channel_id}"
            
            async with self.session.get(
                url,
                auth=aiohttp.BasicAuth(self.ari_username, self.ari_password)
            ) as response:
                if response.status == 200:
                    return await response.json()
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ {channel_id}: {response.status}")
                    return None
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ {channel_id}: {e}")
            return None
    
    async def health_check(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ARI
            url = f"{self.ari_url}/ari/asterisk/info"
            
            async with self.session.get(
                url,
                auth=aiohttp.BasicAuth(self.ari_username, self.ari_password)
            ) as response:
                if response.status == 200:
                    asterisk_info = await response.json()
                    logger.info(f"‚úÖ Asterisk —Ä–∞–±–æ—Ç–∞–µ—Ç: {asterisk_info.get('version', 'unknown')}")
                    return True
                else:
                    logger.error(f"‚ùå Asterisk –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status}")
                    return False
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏: {e}")
            return False
    
    async def periodic_health_check(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
        while True:
            try:
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
                is_healthy = await self.health_check()
                
                if not is_healthy:
                    logger.warning("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
                    await self.reconnect()
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                active_calls = len(self.active_channels)
                active_rooms = len(self.active_rooms)
                
                if active_calls > 0 or active_rooms > 0:
                    logger.info(f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤: {active_calls}, –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç: {active_rooms}")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
    
    async def reconnect(self):
        """–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ARI"""
        try:
            logger.info("üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ARI...")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if self.ari_ws:
                await self.ari_ws.close()
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            await self.connect_to_ari()
            
            logger.info("‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ARI —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ARI: {e}")
    
    def get_system_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        return {
            'active_channels': len(self.active_channels),
            'active_rooms': len(self.active_rooms),
            'uptime': asyncio.get_event_loop().time(),
            'channels': list(self.active_channels.keys()),
            'rooms': list(self.active_rooms.keys())
        }
    
    async def handle_channel_state_change(self, event: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
        channel = event.get('channel', {})
        channel_id = channel.get('id')
        new_state = channel.get('state')
        
        if channel_id in self.active_channels:
            old_state = self.active_channels[channel_id].get('state')
            self.active_channels[channel_id]['state'] = new_state
            
            logger.info(f"üìä –ö–∞–Ω–∞–ª {channel_id}: {old_state} -> {new_state}")
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –∞—É–¥–∏–æ –º–æ—Å—Ç–∞...")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
        for room in self.active_rooms.values():
            await room.disconnect()
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if self.ari_ws:
            await self.ari_ws.close()
        
        if self.session:
            await self.session.close()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler('/logs/audio_bridge.log')
        ]
    )
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞—É–¥–∏–æ –º–æ—Å—Ç–∞ Asterisk <-> LiveKit")
    
    bridge = AudioBridge()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ—Å—Ç
        bridge_task = asyncio.create_task(bridge.start())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        health_task = asyncio.create_task(bridge.periodic_health_check())
        
        # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª—é–±–æ–π –∏–∑ –∑–∞–¥–∞—á
        done, pending = await asyncio.wait(
            [bridge_task, health_task],
            return_when=asyncio.FIRST_COMPLETED
        )
        
        # –û—Ç–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏
        for task in pending:
            task.cancel()
            
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        logger.info("üßπ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∞—É–¥–∏–æ –º–æ—Å—Ç–∞...")
        await bridge.cleanup()
        logger.info("‚úÖ –ê—É–¥–∏–æ –º–æ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    asyncio.run(main())