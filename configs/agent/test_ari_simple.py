#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç ARI –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
"""

import asyncio
import aiohttp
import json
import websockets
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_ari_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ARI"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    ari_url = "http://freepbx-server:8088"
    username = "livekit-agent"
    password = "livekit_ari_secret"
    app_name = "livekit-agent"
    
    try:
        # –¢–µ—Å—Ç HTTP API
        logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP API...")
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"{ari_url}/ari/asterisk/info",
                auth=aiohttp.BasicAuth(username, password)
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    logger.info(f"‚úÖ HTTP API —Ä–∞–±–æ—Ç–∞–µ—Ç: Asterisk {data.get('version')}")
                else:
                    logger.error(f"‚ùå HTTP API –æ—à–∏–±–∫–∞: {response.status}")
                    return False
        
        # –¢–µ—Å—Ç WebSocket
        logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket...")
        ws_url = f"{ari_url.replace('http', 'ws')}/ari/events?api_key=livekit-agent&api_secret=livekit_ari_secret&app=livekit-agent"
        
        try:
            async with websockets.connect(ws_url) as websocket:
                logger.info("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                
                # –û–∂–∏–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥
                try:
                    message = await asyncio.wait_for(websocket.recv(), timeout=5.0)
                    event = json.loads(message)
                    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {event.get('type')}")
                except asyncio.TimeoutError:
                    logger.info("‚úÖ WebSocket —Ä–∞–±–æ—Ç–∞–µ—Ç (–Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π –∑–∞ 5 —Å–µ–∫)")
                
                return True
                
        except Exception as e:
            logger.error(f"‚ùå WebSocket –æ—à–∏–±–∫–∞: {e}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("=== –¢–µ—Å—Ç ARI –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ===")
    
    success = await test_ari_connection()
    
    if success:
        logger.info("üéâ ARI —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        logger.error("üí• ARI —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω!")
        
    return success

if __name__ == "__main__":
    result = asyncio.run(main())
    exit(0 if result else 1)